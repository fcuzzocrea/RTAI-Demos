This is an example to show how to access interrupts directly in a self 
contained mode, i.e usable without anything but just installed on a ADEOSised 
kernel.

Clearly if you need to communicate with user space you must install something 
else, e.g.:
- just rtai_hal to use srqs, see /showroom/kern/sysreq
- rtai_hal and rtai_fifos, many RTAI kernel space examples show what to do
- rtai_hal, the lxrt scheduler (the latter will do nothing but is needed for 
  some entries), rtai_shm, scb, see /showroom/kern/i386/scb.

What attached is a draft that uses the timer interrupt to proof it works. 
You'll likely have to modify it for an adaption to your own needs.
Note that vector does not mean irq number. On a normal non APIC machine you'll 
have to add 32 (at least I recall so). On a machine with APIC/SMP look at
the startup messages. I tested it SMP, so there might be the vector number to 
change, IRQ is OK anyhow. See the comment in the code.

Notice that it requires the rtai_hal module to be installed, but just because 
it uses rt_printk to check it worked and to pend the interrupt to keep Linux 
happy. If you are going to use it on its own there should not be such a problem.

Since we like to demonstrate that hard FPU support can be used in handler,
there is the need to include the RTAI header for FPU support in the 
interrupt handler, but that is just for a matter of convenience.

Paolo Mantegazza.
